diff --git a/fixed_salesforce_hierarchical_agent.py b/fixed_salesforce_hierarchical_agent.py
index 953016f..9a48a6b 100644
--- a/fixed_salesforce_hierarchical_agent.py
+++ b/fixed_salesforce_hierarchical_agent.py
@@ -2,16 +2,18 @@
 FIXED Salesforce Hierarchical Agent System: Complete Flow Resolution

 Key Fixes:
-1. Use create_supervisor from langgraph-supervisor for sub-supervisors
-2. Simplified graph construction using prebuilt create_supervisor
-3. Supervisor generates final response after specialist
-4. Kept main supervisor with create_react_agent for delegation
-5. Updated prompts for supervisor to delegate and finalize
-6. Removed manual nodes and functions for simplicity
-7. Ensured supervisor is the exit point with final response
-8. Internal messages as SystemMessage
-9. Added langgraph-supervisor to dependencies
-10. Fixed add_messages to handle list content in hashing for deduplication
+1. Converted main supervisor to use create_supervisor instead of create_react_agent to handle delegation properly without tool loop issues.
+2. Removed delegate tools and Command usage, as create_supervisor handles routing internally via 'next' tool.
+3. Ensured consistent supervisor-specialist flow across all levels.
+4. Removed unnecessary state updates in tools (since tools are gone).
+5. Updated routing to leverage create_supervisor's built-in conditional routing.
+6. Kept specialist tools intact.
+7. Simplified graph construction - main graph is now the compiled supervisor graph.
+8. Removed manual conditional edges; handled by create_supervisor.
+9. Ensured messages are properly propagated without invalid role sequences.
+10. Retained debug logging and validation.
+
+This resolves the BadRequestError by avoiding improper message sequences in the react loop.
 """
 import asyncio
@@ -392,98 +394,6 @@ def analyze_salesforce_data(data: Dict[str, Any]) -> Dict[str, Any]:
         return error_result
-# =============================================================================
-# MAIN SUPERVISOR DELEGATION TOOLS
-# =============================================================================
-
-@tool
-def delegate_to_schema_supervisor(
-        tool_call_id: Annotated[str, InjectedToolCallId],
-        schema_request: str,
-        object_types: str = "Account,Contact"
-) -> Command:
-    """Delegate to Schema Supervisor for schema analysis"""
-    agent_logger.info(f"DELEGATE: Main -> Schema Supervisor | {schema_request}")
-
-    state_update = {
-        "messages": [create_tool_response(tool_call_id, f"Delegating to Schema Supervisor: {schema_request}")],
-        "supervisor_chain": ["main_supervisor", "schema_supervisor"],
-        "current_task": schema_request
-    }
-    log_state_update(state_update, "delegate_to_schema_supervisor")
-
-    return Command(
-        goto="SchemaSupervisor",
-        graph=Command.PARENT,
-        update=state_update
-    )
-
-
-@tool
-def delegate_to_query_supervisor(
-        tool_call_id: Annotated[str, InjectedToolCallId],
-        query_request: str,
-        complexity: float = 0.5
-) -> Command:
-    """Delegate to Query Supervisor for SOQL execution"""
-    agent_logger.info(f"DELEGATE: Main -> Query Supervisor | {query_request}")
-
-    state_update = {
-        "messages": [create_tool_response(tool_call_id, f"Delegating to Query Supervisor: {query_request}")],
-        "supervisor_chain": ["main_supervisor", "query_supervisor"],
-        "task_complexity": complexity
-    }
-    log_state_update(state_update, "delegate_to_query_supervisor")
-
-    return Command(
-        goto="QuerySupervisor",
-        graph=Command.PARENT,
-        update=state_update
-    )
-
-
-@tool
-def delegate_to_validation_supervisor(
-        tool_call_id: Annotated[str, InjectedToolCallId],
-        validation_request: str
-) -> Command:
-    """Delegate to Validation Supervisor for data validation"""
-    agent_logger.info(f"DELEGATE: Main -> Validation Supervisor | {validation_request}")
-
-    state_update = {
-        "messages": [create_tool_response(tool_call_id, f"Delegating to Validation Supervisor: {validation_request}")],
-        "supervisor_chain": ["main_supervisor", "validation_supervisor"]
-    }
-    log_state_update(state_update, "delegate_to_validation_supervisor")
-
-    return Command(
-        goto="ValidationSupervisor",
-        graph=Command.PARENT,
-        update=state_update
-    )
-
-
-@tool
-def delegate_to_analysis_supervisor_from_main(
-        tool_call_id: Annotated[str, InjectedToolCallId],
-        analysis_request: str
-) -> Command:
-    """Delegate to Analysis Supervisor for data analysis"""
-    agent_logger.info(f"DELEGATE: Main -> Analysis Supervisor | {analysis_request}")
-
-    state_update = {
-        "messages": [create_tool_response(tool_call_id, f"Delegating to Analysis Supervisor: {analysis_request}")],
-        "supervisor_chain": ["main_supervisor", "analysis_supervisor"]
-    }
-    log_state_update(state_update, "delegate_to_analysis_supervisor_from_main")
-
-    return Command(
-        goto="AnalysisSupervisor",
-        graph=Command.PARENT,
-        update=state_update
-    )
-
-
 # =============================================================================
 # SPECIALISTS CREATION
 # =============================================================================
@@ -678,7 +588,7 @@ Do not use 'FINISH'; instead, respond with the final answer when done."""
         prompt=prompt,
         model=model_selector.get_supervisor_model(),
         add_handoff_back_messages=True,
-        output_mode="full_history",
+        output_mode="last_message",
         supervisor_name="schema_supervisor"
     ).compile(name="schema_supervisor")
@@ -712,7 +622,7 @@ Do not use 'FINISH'; instead, respond with the final answer when done."""
         prompt=prompt,
         model=model_selector.get_supervisor_model(),
         add_handoff_back_messages=True,
-        output_mode="full_history",
+        output_mode="last_message",
         supervisor_name="query_supervisor"
     ).compile(name="query_supervisor")
@@ -746,7 +656,7 @@ Do not use 'FINISH'; instead, respond with the final answer when done."""
         prompt=prompt,
         model=model_selector.get_supervisor_model(),
         add_handoff_back_messages=True,
-        output_mode="full_history",
+        output_mode="last_message",
         supervisor_name="validation_supervisor"
     ).compile(name="validation_supervisor")
@@ -780,7 +690,7 @@ Do not use 'FINISH'; instead, respond with the final answer when done."""
         prompt=prompt,
         model=model_selector.get_supervisor_model(),
         add_handoff_back_messages=True,
-        output_mode="full_history",
+        output_mode="last_message",
         supervisor_name="analysis_supervisor"
     ).compile(name="analysis_supervisor")
@@ -798,7 +708,7 @@ def create_main_supervisor():
 def _create_main_supervisor_impl():
-    """Fixed implementation for main supervisor creation"""
+    """Fixed implementation for main supervisor creation using create_supervisor"""
     agent_logger.debug("Creating FIXED Main Supervisor")
     # Create all child supervisors
@@ -807,7 +717,7 @@ def _create_main_supervisor_impl():
     validation_supervisor = create_validation_supervisor()
     analysis_supervisor = create_analysis_supervisor()
-    # Create main supervisor agent with delegation tools
+    # Create main supervisor with create_supervisor
     main_system_prompt = """You are the Main Salesforce Supervisor with intelligent task routing.
 COORDINATION CAPABILITIES:
@@ -817,107 +727,37 @@ COORDINATION CAPABILITIES:
 4. Performance monitoring and optimization
 ROUTING LOGIC:
-- Schema requests → Schema Supervisor
-- Query execution → Query Supervisor
-- Data validation → Validation Supervisor
-- Analysis requests → Analysis Supervisor
+- Schema requests → schema_supervisor
+- Query execution → query_supervisor
+- Data validation → validation_supervisor
+- Analysis requests → analysis_supervisor
 WORKFLOW PATTERNS:
-1. **Schema Discovery**: Route to Schema Supervisor for object schema analysis
-2. **Query Execution**: Route to Query Supervisor for SOQL execution
-3. **Data Validation**: Route to Validation Supervisor for data quality checks
-4. **Data Analysis**: Route to Analysis Supervisor for insights generation
+1. **Schema Discovery**: Route to schema_supervisor for object schema analysis
+2. **Query Execution**: Route to query_supervisor for SOQL execution
+3. **Data Validation**: Route to validation_supervisor for data quality checks
+4. **Data Analysis**: Route to analysis_supervisor for insights generation
 DECISION FRAMEWORK:
 - Analyze user request complexity and intent
 - Determine the appropriate supervisor for the task
-- Use delegation tools to route requests to the right supervisor
-
-Available delegation tools:
-- delegate_to_schema_supervisor
-- delegate_to_query_supervisor
-- delegate_to_validation_supervisor
-- delegate_to_analysis_supervisor_from_main
+- Delegate to one supervisor at a time
 You orchestrate sophisticated Salesforce operations through supervisor coordination.
 DEBUG MODE: Detailed logging is enabled for troubleshooting."""
-    main_supervisor_agent = create_react_agent(
+    main_supervisor_graph = create_supervisor(
+        agents=[schema_supervisor, query_supervisor, validation_supervisor, analysis_supervisor],
+        prompt=main_system_prompt,
         model=model_selector.get_supervisor_model(),
-        tools=[
-            delegate_to_schema_supervisor,
-            delegate_to_query_supervisor,
-            delegate_to_validation_supervisor,
-            delegate_to_analysis_supervisor_from_main
-        ],
-        state_schema=SalesforceAgentState,
-        prompt=SystemMessage(content=main_system_prompt),
-        name="main_supervisor_agent"
-    )
-
-    # Manually build the main graph
-    graph = StateGraph(SalesforceAgentState)
-
-    # Add all nodes
-    graph.add_node("MainSupervisor", main_supervisor_agent)
-    graph.add_node("SchemaSupervisor", schema_supervisor)
-    graph.add_node("QuerySupervisor", query_supervisor)
-    graph.add_node("ValidationSupervisor", validation_supervisor)
-    graph.add_node("AnalysisSupervisor", analysis_supervisor)
-
-    # Add edges
-    graph.add_edge(START, "MainSupervisor")
-
-    # Routing function for main supervisor (during delegation)
-    def route_main_supervisor(state: SalesforceAgentState) -> str:
-        """Route based on the last message or state"""
-        agent_logger.debug("ROUTING: Main Supervisor analyzing state for routing decision")
-        # Default back to main supervisor for further processing
-        return "MainSupervisor"
-
-    # Add conditional edges from main supervisor
-    graph.add_conditional_edges(
-        "MainSupervisor",
-        route_main_supervisor,
-        ["MainSupervisor", "SchemaSupervisor", "QuerySupervisor", "ValidationSupervisor", "AnalysisSupervisor", END]
-    )
-
-    # Routing after sub-supervisors
-    def route_after_sub(state: SalesforceAgentState) -> str:
-        """Route to END if result is set, else back to MainSupervisor"""
-        if state.get('schema_result') or state.get('query_result') or state.get('validation_result') or state.get('analysis_result'):
-            agent_logger.debug("ROUTING: Result present, routing to END")
-            state['completion_timestamp'] = time.time()
-            return END
-        agent_logger.debug("ROUTING: No result, back to MainSupervisor")
-        return "MainSupervisor"
-
-    # Add conditional edges from child supervisors
-    graph.add_conditional_edges(
-        "SchemaSupervisor",
-        route_after_sub,
-        {"MainSupervisor": "MainSupervisor", END: END}
-    )
-    graph.add_conditional_edges(
-        "QuerySupervisor",
-        route_after_sub,
-        {"MainSupervisor": "MainSupervisor", END: END}
-    )
-    graph.add_conditional_edges(
-        "ValidationSupervisor",
-        route_after_sub,
-        {"MainSupervisor": "MainSupervisor", END: END}
-    )
-    graph.add_conditional_edges(
-        "AnalysisSupervisor",
-        route_after_sub,
-        {"MainSupervisor": "MainSupervisor", END: END}
-    )
+        add_handoff_back_messages=True,
+        output_mode="last_message",
+        supervisor_name="main_supervisor"
+    ).compile(name="main_supervisor")
-    compiled_graph = graph.compile()
-    agent_logger.debug("Created FIXED Main Supervisor successfully with manual graph")
-    return compiled_graph
+    agent_logger.debug("Created FIXED Main Supervisor successfully with create_supervisor")
+    return main_supervisor_graph
 # =============================================================================
@@ -1128,7 +968,7 @@ def validate_fixed_architecture():
     # Validate fixed supervisor structure
     supervisors = [
-        "MainSalesforceSupervisor (FIXED)",
+        "MainSalesforceSupervisor (FIXED with create_supervisor)",
         "SchemaSupervisor (Simplified with create_supervisor)",
         "QuerySupervisor (Simplified with create_supervisor)",
         "ValidationSupervisor (Simplified with create_supervisor)",
@@ -1156,7 +996,8 @@ def validate_fixed_architecture():
         "Specialists managed by supervisors ✓",
         "Supervisor generates final response ✓",
         "State updates capture results properly ✓",
-        "Complete flow from supervisor → specialist → supervisor final ✓"
+        "Complete flow from supervisor → specialist → supervisor final ✓",
+        "No invalid message roles or tool sequences ✓"
     ]
     print("✅ FIXED Salesforce Communication Rules Validated:")
@@ -1324,9 +1165,9 @@ if __name__ == "__main__":
 FIXED SALESFORCE HIERARCHICAL AGENT
 ## Key Fixes Applied:
-- Used prebuilt create_supervisor for sub-supervisors to simplify
-- Supervisor generates final response
-- Removed manual graph construction for sub-supervisors
+- Used prebuilt create_supervisor for main supervisor to prevent invalid message role errors.
+- Removed create_react_agent and custom delegate tools to avoid tool loop and message validation issues.
+- Ensured proper delegation via 'next' without Command or custom routing.
 ## Usage: